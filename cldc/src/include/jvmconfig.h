/* !!! This file is auto-generated. Do not edit!!! */

/*
 * jvmconfig.h --
 *
 * Copyright  1990-2007 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version
 * 2 only, as published by the Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included at /legal/license.txt).
 * 
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
 * Clara, CA 95054 or visit www.sun.com if you need additional
 * information or have any questions.
 * 
 * This file is included by every source file in the VM (via
 * the _precompiled.incl file, which is generated by the MakeDeps tool).
 *
 * This file should also be included by MIDP native code that accesses
 * the VM via kni.h, jvm.h, jvmspi.h, ani.h and sni.h.
 *
 * Since this file controls the behavior of other header files of the
 * VM, it must be included before all other VM header files.
 *
 * This file is generated by src/tools/buildtool/BuildTool.java, based
 * on the contents of src/vm/share/utilities/Globals.hpp, the platform
 * configuration file (build/<platform>/<platform>.cfg) and your
 * environment variable settings. Please see Globals.hpp for details.
 *
 * config_prolog.txt version:   
 */

#ifndef _JVM_CONFIG_H_
#define _JVM_CONFIG_H_

#ifdef _JAVASOFT_KNI_H_
#error this file must be included before kni.h
#endif

#ifdef _SNI_H_
#error this file must be included before sni.h
#endif

#ifdef _ANI_H_
#error this file must be included before ani.h
#endif

#ifdef _JVMSPI_H_
#error this file must be included before jvmspi.h
#endif

#ifdef _JVM_H_
#error this file must be included before jvm.h
#endif

// BEGIN: Information derived from "platform" file
#define INTERPRETER_ARCH_NAME "c"
// END: Information derived from "platform" file


/*
 * ENABLE_ARM_V5TE
 *       Support instructions in the ARMv5TE architecture (such as
 *       BLX or CLZ).
 */

#define ENABLE_ARM_V5TE               0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_ARM_V6
 *       Support instructions in the ARMv6 architecture.
 */

#define ENABLE_ARM_V6                 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_ARM_V6T2
 *       Support instructions in the ARMv6T2 architecture (Thumb-2).
 */

#define ENABLE_ARM_V6T2               0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_ARM_V7
 *       Support instructions in the ARMv7 architecture.
 */

#define ENABLE_ARM_V7                 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_ARM_VFP
 *       Support ARM VFP instructions.
 */

#define ENABLE_ARM_VFP                0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_ARM9_VFP_BUG_WORKAROUND
 *       Workaround ARM9+VFP hardware feature
 */

#define ENABLE_ARM9_VFP_BUG_WORKAROUND 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_ARM11_JAZELLE_DLOAD_BUG_WORKAROUND
 *       Workaround ARM11 Jazelle hardware bug
 */

#define ENABLE_ARM11_JAZELLE_DLOAD_BUG_WORKAROUND 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_BRUTE_FORCE_ICACHE_FLUSH
 *       Generate brute-force code to flush the instruction cache
 *       (for platforms without OS support).
 */

#define ENABLE_BRUTE_FORCE_ICACHE_FLUSH 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_BYTECODE_FLUSHING
 *       Special code needed for bytecode rewriting
 */

#define ENABLE_BYTECODE_FLUSHING      0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_C_INTERPRETER
 *       Use Java interpreter written in C code instead of the
 *       generated assembler interpreter.
 */

#define ENABLE_C_INTERPRETER          1  /* User environment variable */

/*
 * ENABLE_CLDC_11
 *       Support CLDC 1.1 Specification instead of CLDC 1.0.
 */

#define ENABLE_CLDC_11                1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_CLDC_111
 *       Support CLDC 1.1.1 Specification instead of CLDC 1.0.
 */

#define ENABLE_CLDC_111               0  /* User environment variable */

/*
 * ENABLE_CODE_OPTIMIZER
 *       Enable optimization of code generated by dynamic compiler
 *       for a specific CPU.
 */

#define ENABLE_CODE_OPTIMIZER         0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_COMPILER
 *       Add the dynamic adaptive compiler for byte code execution.
 */

#define ENABLE_COMPILER               0  /* User environment variable */

/*
 * ENABLE_COMPILER_TYPE_INFO
 *       Maintain object type information during compilation.
 */

#define ENABLE_COMPILER_TYPE_INFO     1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_CPU_VARIANT
 *       Enable specialized features for a variant of the main CPU
 *       type.
 */

#define ENABLE_CPU_VARIANT            0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_DISPATCH_TABLE_ALIGNMENT
 *       Make dispatch table 1024 aligned
 */

#define ENABLE_DISPATCH_TABLE_ALIGNMENT 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_DISPATCH_TABLE_PADDING
 *       Add extra entries to the dispatch table
 */

#define ENABLE_DISPATCH_TABLE_PADDING 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_DYNAMIC_NATIVE_METHODS
 *       Add ability to execute user classes containing native
 *       methods.
 */

#define ENABLE_DYNAMIC_NATIVE_METHODS 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_DYNAMIC_RESTRICTED_PACKAGE
 *       Allow restricted packages to be dynamically specified.
 */

#define ENABLE_DYNAMIC_RESTRICTED_PACKAGE 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_FAST_CRC32
 *       Use fast CRC32 routine? Adds 1KB footprint.
 */

#define ENABLE_FAST_CRC32             1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_FAST_MEM_ROUTINES
 *       Use built-in memcmp and memcpy routines in the generated
 *       interpreter loop.
 */

#define ENABLE_FAST_MEM_ROUTINES      1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_INLINEASM_INTERPRETER
 *       If true, the interpreter loop is generated as a C file with
 *       inlined assembly code. This option is used on x86 only.
 */

#define ENABLE_INLINEASM_INTERPRETER  0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_INLINED_ARRAYCOPY
 *       Inline arraycopy() calls in compiled code
 */

#define ENABLE_INLINED_ARRAYCOPY      1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_INTERPRETATION_LOG
 *       Use a log of the most recently interpreted methods to make
 *       sure hot methods are compiled. Disable this option when
 *       running on slow devices.
 */

#define ENABLE_INTERPRETATION_LOG     1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_FLOAT
 *       Support floating point byte codes.
 */

#define ENABLE_FLOAT                  1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_INCREASING_JAVA_STACK
 *       If true, the Java stack grows upwards. E.g., when an item is
 *       pushed, the stack pointer's value increases.
 */

#define ENABLE_INCREASING_JAVA_STACK  0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_EXTENDED_API
 *       Enable Java API extensions
 */

#define ENABLE_EXTENDED_API           0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_RVDS
 *       Support for ARM RealView Developer Suite (2.0 or later)
 */

#define ENABLE_RVDS                   0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_ISOLATES
 *       Add Isolate support
 */

#define ENABLE_ISOLATES               0  /* User environment variable */

/*
 * ENABLE_JAVA_DEBUGGER
 *       Add Java debugger support.
 */

#define ENABLE_JAVA_DEBUGGER          0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_JAZELLE
 *       Enable support for Jazelle(TM) hardware acceleration of Java
 *       bytecode execution. This is a meta flag that enables a
 *       number of other build flags.
 */

#define ENABLE_JAZELLE                0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_HEAP_NEARS_IN_HEAP
 *       Ensure all nears of romized HEAP objects and prototypical
 *       nears of all classes are in ROM HEAP block by cloning those
 *       nears from ROM TEXT and DATA blocks to the ROM HEAP block.
 *       Speeds up GC, but slightly increases footprint.
 */

#define ENABLE_HEAP_NEARS_IN_HEAP     0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_PREINITED_TASK_MIRRORS
 *       Put TaskMirror to a separate section of SystemROM image to
 *       allow loading them during startup of each task.
 */

#define ENABLE_PREINITED_TASK_MIRRORS 1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_LIB_IMAGES
 *       (unsupported) allow loading of multiple binary images into
 *       the same task.
 */

#define ENABLE_LIB_IMAGES             0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_PAGE_PROTECTION
 *       Use the mechanism of protected memory pages for certain
 *       compiler optimizations (e.g. check_timer_tick). Works only
 *       if the feature is supported by OS.
 */

#define ENABLE_PAGE_PROTECTION        0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_ZERO_YOUNG_GENERATION
 *       Fills youngen with zero values after GC. When the option is
 *       off each newly created object is cleared right after
 *       allocation.
 */

#define ENABLE_ZERO_YOUNG_GENERATION  1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_MEMORY_MAPPED_FILES
 *       Use memory-mapped files for loading binary images. This flag
 *       takes effect only if the target platform has
 *       SUPPORTS_MEMORY_MAPPED_FILES=1.
 */

#define ENABLE_MEMORY_MAPPED_FILES    1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_MEMORY_PROFILER
 *       Add Memory Profiler support.
 */

#define ENABLE_MEMORY_PROFILER        0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_MEMORY_MONITOR
 *       Add Memory Monitor support.
 */

#define ENABLE_MEMORY_MONITOR         0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_METHOD_EXECUTION_TRACE
 *       Add method execution trace support.
 */

#define ENABLE_METHOD_EXECUTION_TRACE 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_ROM_JAVA_DEBUGGER
 *       Add Java debugger support for ROMized. classes
 */

#define ENABLE_ROM_JAVA_DEBUGGER      0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_SYSTEM_CLASSES_DEBUG
 *       Build system classes with -g and +MakeROMDebuggable. Must be
 *       passed in via make command line
 */

#define ENABLE_SYSTEM_CLASSES_DEBUG   0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_JAVA_DEBUGGER_OLD_JAVAC
 *       Add special code in method entry to clear locals if code
 *       compiled with old compiler.
 */

#define ENABLE_JAVA_DEBUGGER_OLD_JAVAC 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_JAVA_STACK_TAGS
 *       Interleave values on the Java stack with tags.
 */

#define ENABLE_JAVA_STACK_TAGS        0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_JAR_ENTRY_CACHE
 *       Cache the JAR entry table for fast lookup.
 */

#define ENABLE_JAR_ENTRY_CACHE        1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_JAR_READER_EXPORTS
 *       Export routines for the JAR reader.
 */

#define ENABLE_JAR_READER_EXPORTS     1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_KVM_COMPAT
 *       Support the kvmcompat module which provides limited
 *       compatibility with KVM-based (pre-KNI) native methods.
 */

#define ENABLE_KVM_COMPAT             0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_NATIVE_ORDER_REWRITING
 *       Enable rewriting of various bytecodes so that its fields are
 *       in native ordering
 */

#define ENABLE_NATIVE_ORDER_REWRITING 1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_MEASURE_NATIVE_STACK
 *       Measures the amount of native stack the VM uses
 */

#define ENABLE_MEASURE_NATIVE_STACK   0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_MINIMAL_ASSERT_BUILD
 *       Turn off all non-product options unrelated to run-time
 *       assertion checks. This allows you to build a smaller Debug
 *       mode VM that still has assertions checks.
 */

#define ENABLE_MINIMAL_ASSERT_BUILD   0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_MONET
 *       Enable on-device support (conversion and loading) of binary
 *       application image files for fast class loading.
 */

#define ENABLE_MONET                  0  /* Platform default: jvm.make */

/*
 * ENABLE_MONET_COMPILATION
 *       Enable on-device method precompilation Requires
 *       ENABLE_MONET.
 */

#define ENABLE_MONET_COMPILATION      0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_MONET_DEBUG_DUMP
 *       Create debug dump files that describe the contents of binary
 *       ROM image files.
 */

#ifndef PRODUCT
#define ENABLE_MONET_DEBUG_DUMP       1  /* VM default: BuildFlags.hpp */
#else
#define ENABLE_MONET_DEBUG_DUMP       0  /* VM default: BuildFlags.hpp */
#endif

/*
 * ENABLE_VM_MIPS
 *       Enable measuring the speed of ARM CPU. Requires
 *       ENABLE_PERFORMANCE_COUNTERS.
 */

#define ENABLE_VM_MIPS                0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_METHOD_TRAPS
 *       Add MethodTrap= command-line option for special handling of
 *       a particular Java method invocation. Used for startup time
 *       measurements.
 */

#define ENABLE_METHOD_TRAPS           0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_PCSL
 *       Enable support for the Portable Common Services Library.
 */

#ifndef ENABLE_PCSL
#define ENABLE_PCSL                   0  /* VM default: BuildFlags.hpp */
#endif

/*
 * ENABLE_PERFORMANCE_COUNTERS
 *       Enable coarse-grain performance counters. for methods
 *       compiled, memory allocated, etc. These counters usually do
 *       not skew execution time.
 */

#ifndef PRODUCT
#define ENABLE_PERFORMANCE_COUNTERS   1  /* VM default: BuildFlags.hpp */
#else
#define ENABLE_PERFORMANCE_COUNTERS   0  /* VM default: BuildFlags.hpp */
#endif

/*
 * ENABLE_DETAILED_PERFORMANCE_COUNTERS
 *       Enable fine-grain performance counters. These counters may
 *       skew execution time.
 */

#define ENABLE_DETAILED_PERFORMANCE_COUNTERS 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_EVENT_LOGGER
 *       Enable event logging. Used for debugging, performance and
 *       pause measurements.
 */

#define ENABLE_EVENT_LOGGER           0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_EXTENDED_EVENT_LOGGER
 *       Enable event type extension. Used for debugging, performance
 *       and pause measurements.
 */

#define ENABLE_EXTENDED_EVENT_LOGGER  0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_PRODUCT_PRINT_STACK
 *       Include the debug function pss() in product build (useful
 *       for diagnosing deadlocks.
 */

#ifndef PRODUCT
#define ENABLE_PRODUCT_PRINT_STACK    0  /* Always disabled */
#else
#define ENABLE_PRODUCT_PRINT_STACK    0  /* VM default: BuildFlags.hpp */
#endif

/*
 * ENABLE_PROFILER
 *       Add (Java) profiling support.
 */

#define ENABLE_PROFILER               0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_WTK_PROFILER
 *       Add WTK-compatible profiling support
 */

#define ENABLE_WTK_PROFILER           0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_REMOTE_TRACER
 *       Add remote tracing capabilities.
 */

#define ENABLE_REMOTE_TRACER          0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_SYSTEM_ROM_OVERRIDE
 *       Allow a debug-mode VM to override the system ROM image by
 *       loading system classes from classes.zip.
 */

#ifndef PRODUCT
#define ENABLE_SYSTEM_ROM_OVERRIDE    1  /* VM default: BuildFlags.hpp */
#else
#define ENABLE_SYSTEM_ROM_OVERRIDE    0  /* Always disabled */
#endif

/*
 * ENABLE_SYSTEM_ROM_HEADER_SKIPPING
 *       Skip object headers in the system ROM image to save space.
 */

#define ENABLE_SYSTEM_ROM_HEADER_SKIPPING 1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_ROM_DEBUG_SYMBOLS
 *       Use extra symbols in ROMImage.cpp to aid debugging (e.g.,
 *       recover original name of renamed classes).
 */

#ifndef PRODUCT
#define ENABLE_ROM_DEBUG_SYMBOLS      1  /* VM default: BuildFlags.hpp */
#else
#define ENABLE_ROM_DEBUG_SYMBOLS      0  /* VM default: BuildFlags.hpp */
#endif

/*
 * ENABLE_SEGMENTED_ROM_TEXT_BLOCK
 *       Split the TEXT block of a source ROM image into several
 *       segments.
 */

#define ENABLE_SEGMENTED_ROM_TEXT_BLOCK 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_SOFT_FLOAT
 *       Use the software floating point operations.
 */

#define ENABLE_SOFT_FLOAT             0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_SEMAPHORE
 *       Include com.sun.cldc.util.Semaphore class
 */

#define ENABLE_SEMAPHORE              1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_ROM_GENERATOR
 *       Include code for generating (source or binary) ROM image.
 */

#ifndef PRODUCT
#define ENABLE_ROM_GENERATOR          1  /* VM default: BuildFlags.hpp */
#else
#define ENABLE_ROM_GENERATOR          0  /* VM default: BuildFlags.hpp */
#endif

/*
 * ENABLE_INTERPRETER_GENERATOR
 *       Include code for generating interpreter loop in non-PRODUCT
 *       build.
 */

#ifndef PRODUCT
#define ENABLE_INTERPRETER_GENERATOR  0  /* User environment variable */
#else
#define ENABLE_INTERPRETER_GENERATOR  0  /* Always disabled */
#endif

/*
 * ENABLE_STACK_TRACE
 *       Include code for printing the stack trace of Java Throwable
 *       objects.
 */

#define ENABLE_STACK_TRACE            1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_THUMB_LIBC_GLUE
 *       Linux-only: Use glue code inside the VM for invoking
 *       functions in the GNU LIBC. Use this option if the VM is
 *       built in THUMB mode but your LIBC is not built with
 *       interworking.
 */

#define ENABLE_THUMB_LIBC_GLUE        0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_THUMB_VM
 *       Enable THUMB interworking in interpreter and compiled Java
 *       methods, so that the native code in the VM can be compiled
 *       in THUMB mode.
 */

#define ENABLE_THUMB_VM               1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_THUMB_COMPILER
 *       Generate compiled Java methods in THUMB mode
 */

#define ENABLE_THUMB_COMPILER         0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_THUMB_REGISTER_MAPPING
 *       Generate ARM interpreter with fp and jsp as low registers.
 *       Critical for THUMB compiler.
 */

#define ENABLE_THUMB_REGISTER_MAPPING 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_THUMB_GP_TABLE
 *       Generate inverted GP table. Allows for small GP register
 *       offsets to aid the THUMB compiler.
 */

#define ENABLE_THUMB_GP_TABLE         0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_TIMER_THREAD
 *       Use a thread to generate timer ticks instead of a timer
 *       signal handler.
 */

#define ENABLE_TIMER_THREAD           1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_TTY_TRACE
 *       Enable the various TraceXXX flags
 */

#ifndef PRODUCT
#define ENABLE_TTY_TRACE              1  /* VM default: BuildFlags.hpp */
#else
#define ENABLE_TTY_TRACE              0  /* VM default: BuildFlags.hpp */
#endif

/*
 * ENABLE_TOS_CACHING
 *       Jazelle only. Allow TOS caching.
 */

#define ENABLE_TOS_CACHING            1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_FULL_STACK
 *       Jazelle only. Use Full Java Stack.
 */

#define ENABLE_FULL_STACK             1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_VERBOSE_ASSERTION
 *       Print detailed error messages when a run-time assertion
 *       fails.
 */

#ifndef PRODUCT
#define ENABLE_VERBOSE_ASSERTION      1  /* VM default: BuildFlags.hpp */
#else
#define ENABLE_VERBOSE_ASSERTION      0  /* VM default: BuildFlags.hpp */
#endif

/*
 * ENABLE_VERIFY_ONLY
 *       Add support for using the VM as a tool for classpath
 *       verification without any byte code execution.
 */

#define ENABLE_VERIFY_ONLY            1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_EMBEDDED_CALLINFO
 *       Compiler-specific. Embed call info records in compiled code
 *       just after the call instruction. This is used to debug the
 *       correctness of ENABLE_APPENDED_CALLINFO.
 */

#define ENABLE_EMBEDDED_CALLINFO      0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_APPENDED_CALLINFO
 *       Compiler-specific. Append all call info records for a method
 *       at the end of compiled code of that method.
 */

#define ENABLE_APPENDED_CALLINFO      1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_COMPRESSED_VSF
 *       Compiler-specific. Include table of compressed VSF in the
 *       Relocation of CompiledMethod to reduce the produced code
 *       size.
 */

#define ENABLE_COMPRESSED_VSF         0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_INLINE_COMPILER_STUBS
 *       Compiler-specific. Generate inlined code for creating new
 *       objects and type arrays (instead of calling
 *       compiler_new_object and compiler_new_type_array stubs).
 */

#define ENABLE_INLINE_COMPILER_STUBS  1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_XSCALE_WMMX_INSTRUCTIONS
 *       Use XScale WMMX instructions in compiled code and
 *       interpreter.
 */

#define ENABLE_XSCALE_WMMX_INSTRUCTIONS 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_XSCALE_WMMX_TIMER_TICK
 *       Use XScale WMMX registers to check for timer ticks.
 */

#define ENABLE_XSCALE_WMMX_TIMER_TICK 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_XSCALE_WMMX_ARRAYCOPY
 *       Use XScale WMMX to implement System.arraycopy().
 */

#define ENABLE_XSCALE_WMMX_ARRAYCOPY  0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_REMEMBER_ARRAY_LENGTH
 *       Remember the length of the last accessed array in a
 *       register.
 */

#define ENABLE_REMEMBER_ARRAY_LENGTH  0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_LOOP_OPTIMIZATION
 *       Simplify the code sequence at end end of a loop.
 */

#define ENABLE_LOOP_OPTIMIZATION      0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_XSCALE_PMU_CYCLE_COUNTER
 *       Use the PMU cycle counter on Intel Xscale CPU for
 *       performance measurement.
 */

#define ENABLE_XSCALE_PMU_CYCLE_COUNTER 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_NPCE
 *       Null-pointer check elimination. This requires OS support for
 *       exceptions when accessing address 0x0.
 */

#define ENABLE_NPCE                   0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_INTERNAL_CODE_OPTIMIZER
 *       Improved code optimizer for scheduling ARM instructions.
 */

#define ENABLE_INTERNAL_CODE_OPTIMIZER 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_INLINE
 *       Inline simple methods into their callers in compiled code.
 */

#define ENABLE_INLINE                 1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_REMEMBER_ARRAY_CHECK
 *       Remember the length checking result of a un-changed local
 *       variable.
 */

#define ENABLE_REMEMBER_ARRAY_CHECK   0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_STATIC_TRAMPOLINE
 *       Use static trampoline in dispatch to subroutine instead.
 */

#define ENABLE_STATIC_TRAMPOLINE      0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_TRAMPOLINE
 *       Use branch instruction to replace mov pc, rc in static
 *       method invoking. This is faster on the Xscale which has
 *       branch prediction.
 */

#define ENABLE_TRAMPOLINE             0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_CSE
 *       Eliminate memory access related common byte code
 */

#define ENABLE_CSE                    1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_HARDWARE_TIMER_FOR_TICKS
 *       Nucleus-XScale only. Include code to set up a hardware timer
 *       to provide timer ticks to Nucleus. Even when enabled the
 *       timer is still controllable with generic runtime flags. See
 *       Globals_nucleus.hpp.
 */

#define ENABLE_HARDWARE_TIMER_FOR_TICKS 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_OOP_TAG
 *       Support for debug int in oopdesc used for MVM GC tracing
 */

#define ENABLE_OOP_TAG                0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_MULTIPLE_PROFILES_SUPPORT
 *       Add support for using multiple profiles that may provide
 *       mutually exclusive APIs. Allows the hiding of certain
 *       classes under a specific profile.
 */

#define ENABLE_MULTIPLE_PROFILES_SUPPORT 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_MEMBER_HIDING
 *       Add support to hide individual class and interface members.
 */

#define ENABLE_MEMBER_HIDING          0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_JVMPI_PROFILE
 *       To support JVMPI profiler.
 */

#define ENABLE_JVMPI_PROFILE          0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_JVMPI_PROFILE_VERIFY
 *       To support JVMPI profiler verification.
 */

#define ENABLE_JVMPI_PROFILE_VERIFY   0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_CODE_PATCHING
 *       Use code patching mechanism for timer tick checking
 *       optimizations.
 */

#define ENABLE_CODE_PATCHING          0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_CONDITIONAL_BRANCH_OPTIMIZATIONS
 *       Use flags set by arithmetic instructions
 */

#define ENABLE_CONDITIONAL_BRANCH_OPTIMIZATIONS 1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_FREQUENT_FORCED_GC_SUPPRESSION
 *       Enable garbage collection optimization
 */

#define ENABLE_FREQUENT_FORCED_GC_SUPPRESSION 0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_JNI
 *       Enable (partial) JNI support.
 */

#define ENABLE_JNI                    0  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_ALLOCATION_REDO
 *       Enable support for memory allocation redo, see
 *       JVMSPI_HandleOutOfMemory().
 */

#define ENABLE_ALLOCATION_REDO        1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_ANNOTATED_LAST_REG_ALLOCATION
 *       Force register allocator to allocate annotated registers
 *       last.
 */

#define ENABLE_ANNOTATED_LAST_REG_ALLOCATION 1  /* VM default: BuildFlags.hpp */

/*
 * ENABLE_STACK_ALIGNMENT
 *       Enable aligned stack pointer for native calls
 */

#define ENABLE_STACK_ALIGNMENT        0  /* VM default: BuildFlags.hpp */

/*
 * The following table is for dumping the flags
 * for debugging purposes.
 */

#ifndef PRODUCT
#define ENABLE_FLAG_VALUES { \
	"ENABLE_ARM_V5TE",                "-", \
	"ENABLE_ARM_V6",                  "-", \
	"ENABLE_ARM_V6T2",                "-", \
	"ENABLE_ARM_V7",                  "-", \
	"ENABLE_ARM_VFP",                 "-", \
	"ENABLE_ARM9_VFP_BUG_WORKAROUND", "-", \
	"ENABLE_ARM11_JAZELLE_DLOAD_BUG_WORKAROUND", "-", \
	"ENABLE_BRUTE_FORCE_ICACHE_FLUSH", "-", \
	"ENABLE_BYTECODE_FLUSHING",       "-", \
	"ENABLE_C_INTERPRETER",           "enabled", \
	"ENABLE_CLDC_11",                 "enabled", \
	"ENABLE_CLDC_111",                "-", \
	"ENABLE_CODE_OPTIMIZER",          "-", \
	"ENABLE_COMPILER",                "-", \
	"ENABLE_COMPILER_TYPE_INFO",      "enabled", \
	"ENABLE_CPU_VARIANT",             "-", \
	"ENABLE_DISPATCH_TABLE_ALIGNMENT", "-", \
	"ENABLE_DISPATCH_TABLE_PADDING",  "-", \
	"ENABLE_DYNAMIC_NATIVE_METHODS",  "-", \
	"ENABLE_DYNAMIC_RESTRICTED_PACKAGE", "-", \
	"ENABLE_FAST_CRC32",              "enabled", \
	"ENABLE_FAST_MEM_ROUTINES",       "enabled", \
	"ENABLE_INLINEASM_INTERPRETER",   "-", \
	"ENABLE_INLINED_ARRAYCOPY",       "enabled", \
	"ENABLE_INTERPRETATION_LOG",      "enabled", \
	"ENABLE_FLOAT",                   "enabled", \
	"ENABLE_INCREASING_JAVA_STACK",   "-", \
	"ENABLE_EXTENDED_API",            "-", \
	"ENABLE_RVDS",                    "-", \
	"ENABLE_ISOLATES",                "-", \
	"ENABLE_JAVA_DEBUGGER",           "-", \
	"ENABLE_JAZELLE",                 "-", \
	"ENABLE_HEAP_NEARS_IN_HEAP",      "-", \
	"ENABLE_PREINITED_TASK_MIRRORS",  "enabled", \
	"ENABLE_LIB_IMAGES",              "-", \
	"ENABLE_PAGE_PROTECTION",         "-", \
	"ENABLE_ZERO_YOUNG_GENERATION",   "enabled", \
	"ENABLE_MEMORY_MAPPED_FILES",     "enabled", \
	"ENABLE_MEMORY_PROFILER",         "-", \
	"ENABLE_MEMORY_MONITOR",          "-", \
	"ENABLE_METHOD_EXECUTION_TRACE",  "-", \
	"ENABLE_ROM_JAVA_DEBUGGER",       "-", \
	"ENABLE_SYSTEM_CLASSES_DEBUG",    "-", \
	"ENABLE_JAVA_DEBUGGER_OLD_JAVAC", "-", \
	"ENABLE_JAVA_STACK_TAGS",         "-", \
	"ENABLE_JAR_ENTRY_CACHE",         "enabled", \
	"ENABLE_JAR_READER_EXPORTS",      "enabled", \
	"ENABLE_KVM_COMPAT",              "-", \
	"ENABLE_NATIVE_ORDER_REWRITING",  "enabled", \
	"ENABLE_MEASURE_NATIVE_STACK",    "-", \
	"ENABLE_MINIMAL_ASSERT_BUILD",    "-", \
	"ENABLE_MONET",                   "-", \
	"ENABLE_MONET_COMPILATION",       "-", \
	"ENABLE_MONET_DEBUG_DUMP",        "enabled", \
	"ENABLE_VM_MIPS",                 "-", \
	"ENABLE_METHOD_TRAPS",            "-", \
	"ENABLE_PCSL",                    "-", \
	"ENABLE_PERFORMANCE_COUNTERS",    "enabled", \
	"ENABLE_DETAILED_PERFORMANCE_COUNTERS", "-", \
	"ENABLE_EVENT_LOGGER",            "-", \
	"ENABLE_EXTENDED_EVENT_LOGGER",   "-", \
	"ENABLE_PRODUCT_PRINT_STACK",     "-", \
	"ENABLE_PROFILER",                "-", \
	"ENABLE_WTK_PROFILER",            "-", \
	"ENABLE_REMOTE_TRACER",           "-", \
	"ENABLE_SYSTEM_ROM_OVERRIDE",     "enabled", \
	"ENABLE_SYSTEM_ROM_HEADER_SKIPPING", "enabled", \
	"ENABLE_ROM_DEBUG_SYMBOLS",       "enabled", \
	"ENABLE_SEGMENTED_ROM_TEXT_BLOCK", "-", \
	"ENABLE_SOFT_FLOAT",              "-", \
	"ENABLE_SEMAPHORE",               "enabled", \
	"ENABLE_ROM_GENERATOR",           "enabled", \
	"ENABLE_INTERPRETER_GENERATOR",   "-", \
	"ENABLE_STACK_TRACE",             "enabled", \
	"ENABLE_THUMB_LIBC_GLUE",         "-", \
	"ENABLE_THUMB_VM",                "-", \
	"ENABLE_THUMB_COMPILER",          "-", \
	"ENABLE_THUMB_REGISTER_MAPPING",  "-", \
	"ENABLE_THUMB_GP_TABLE",          "-", \
	"ENABLE_TIMER_THREAD",            "enabled", \
	"ENABLE_TTY_TRACE",               "enabled", \
	"ENABLE_TOS_CACHING",             "enabled", \
	"ENABLE_FULL_STACK",              "enabled", \
	"ENABLE_VERBOSE_ASSERTION",       "enabled", \
	"ENABLE_VERIFY_ONLY",             "enabled", \
	"ENABLE_EMBEDDED_CALLINFO",       "-", \
	"ENABLE_APPENDED_CALLINFO",       "enabled", \
	"ENABLE_COMPRESSED_VSF",          "-", \
	"ENABLE_INLINE_COMPILER_STUBS",   "enabled", \
	"ENABLE_XSCALE_WMMX_INSTRUCTIONS", "-", \
	"ENABLE_XSCALE_WMMX_TIMER_TICK",  "-", \
	"ENABLE_XSCALE_WMMX_ARRAYCOPY",   "-", \
	"ENABLE_REMEMBER_ARRAY_LENGTH",   "-", \
	"ENABLE_LOOP_OPTIMIZATION",       "-", \
	"ENABLE_XSCALE_PMU_CYCLE_COUNTER", "-", \
	"ENABLE_NPCE",                    "-", \
	"ENABLE_INTERNAL_CODE_OPTIMIZER", "-", \
	"ENABLE_INLINE",                  "enabled", \
	"ENABLE_REMEMBER_ARRAY_CHECK",    "-", \
	"ENABLE_STATIC_TRAMPOLINE",       "-", \
	"ENABLE_TRAMPOLINE",              "-", \
	"ENABLE_CSE",                     "enabled", \
	"ENABLE_HARDWARE_TIMER_FOR_TICKS", "-", \
	"ENABLE_OOP_TAG",                 "-", \
	"ENABLE_MULTIPLE_PROFILES_SUPPORT", "-", \
	"ENABLE_MEMBER_HIDING",           "-", \
	"ENABLE_JVMPI_PROFILE",           "-", \
	"ENABLE_JVMPI_PROFILE_VERIFY",    "-", \
	"ENABLE_CODE_PATCHING",           "-", \
	"ENABLE_CONDITIONAL_BRANCH_OPTIMIZATIONS", "enabled", \
	"ENABLE_FREQUENT_FORCED_GC_SUPPRESSION", "-", \
	"ENABLE_JNI",                     "-", \
	"ENABLE_ALLOCATION_REDO",         "enabled", \
	"ENABLE_ANNOTATED_LAST_REG_ALLOCATION", "enabled", \
	"ENABLE_STACK_ALIGNMENT",         "-", \
}
#else
#define ENABLE_FLAG_VALUES { \
	"ENABLE_ARM_V5TE",                "-", \
	"ENABLE_ARM_V6",                  "-", \
	"ENABLE_ARM_V6T2",                "-", \
	"ENABLE_ARM_V7",                  "-", \
	"ENABLE_ARM_VFP",                 "-", \
	"ENABLE_ARM9_VFP_BUG_WORKAROUND", "-", \
	"ENABLE_ARM11_JAZELLE_DLOAD_BUG_WORKAROUND", "-", \
	"ENABLE_BRUTE_FORCE_ICACHE_FLUSH", "-", \
	"ENABLE_BYTECODE_FLUSHING",       "-", \
	"ENABLE_C_INTERPRETER",           "enabled", \
	"ENABLE_CLDC_11",                 "enabled", \
	"ENABLE_CLDC_111",                "-", \
	"ENABLE_CODE_OPTIMIZER",          "-", \
	"ENABLE_COMPILER",                "-", \
	"ENABLE_COMPILER_TYPE_INFO",      "enabled", \
	"ENABLE_CPU_VARIANT",             "-", \
	"ENABLE_DISPATCH_TABLE_ALIGNMENT", "-", \
	"ENABLE_DISPATCH_TABLE_PADDING",  "-", \
	"ENABLE_DYNAMIC_NATIVE_METHODS",  "-", \
	"ENABLE_DYNAMIC_RESTRICTED_PACKAGE", "-", \
	"ENABLE_FAST_CRC32",              "enabled", \
	"ENABLE_FAST_MEM_ROUTINES",       "enabled", \
	"ENABLE_INLINEASM_INTERPRETER",   "-", \
	"ENABLE_INLINED_ARRAYCOPY",       "enabled", \
	"ENABLE_INTERPRETATION_LOG",      "enabled", \
	"ENABLE_FLOAT",                   "enabled", \
	"ENABLE_INCREASING_JAVA_STACK",   "-", \
	"ENABLE_EXTENDED_API",            "-", \
	"ENABLE_RVDS",                    "-", \
	"ENABLE_ISOLATES",                "-", \
	"ENABLE_JAVA_DEBUGGER",           "-", \
	"ENABLE_JAZELLE",                 "-", \
	"ENABLE_HEAP_NEARS_IN_HEAP",      "-", \
	"ENABLE_PREINITED_TASK_MIRRORS",  "enabled", \
	"ENABLE_LIB_IMAGES",              "-", \
	"ENABLE_PAGE_PROTECTION",         "-", \
	"ENABLE_ZERO_YOUNG_GENERATION",   "enabled", \
	"ENABLE_MEMORY_MAPPED_FILES",     "enabled", \
	"ENABLE_MEMORY_PROFILER",         "-", \
	"ENABLE_MEMORY_MONITOR",          "-", \
	"ENABLE_METHOD_EXECUTION_TRACE",  "-", \
	"ENABLE_ROM_JAVA_DEBUGGER",       "-", \
	"ENABLE_SYSTEM_CLASSES_DEBUG",    "-", \
	"ENABLE_JAVA_DEBUGGER_OLD_JAVAC", "-", \
	"ENABLE_JAVA_STACK_TAGS",         "-", \
	"ENABLE_JAR_ENTRY_CACHE",         "enabled", \
	"ENABLE_JAR_READER_EXPORTS",      "enabled", \
	"ENABLE_KVM_COMPAT",              "-", \
	"ENABLE_NATIVE_ORDER_REWRITING",  "enabled", \
	"ENABLE_MEASURE_NATIVE_STACK",    "-", \
	"ENABLE_MINIMAL_ASSERT_BUILD",    "-", \
	"ENABLE_MONET",                   "-", \
	"ENABLE_MONET_COMPILATION",       "-", \
	"ENABLE_MONET_DEBUG_DUMP",        "-", \
	"ENABLE_VM_MIPS",                 "-", \
	"ENABLE_METHOD_TRAPS",            "-", \
	"ENABLE_PCSL",                    "-", \
	"ENABLE_PERFORMANCE_COUNTERS",    "-", \
	"ENABLE_DETAILED_PERFORMANCE_COUNTERS", "-", \
	"ENABLE_EVENT_LOGGER",            "-", \
	"ENABLE_EXTENDED_EVENT_LOGGER",   "-", \
	"ENABLE_PRODUCT_PRINT_STACK",     "-", \
	"ENABLE_PROFILER",                "-", \
	"ENABLE_WTK_PROFILER",            "-", \
	"ENABLE_REMOTE_TRACER",           "-", \
	"ENABLE_SYSTEM_ROM_OVERRIDE",     "-", \
	"ENABLE_SYSTEM_ROM_HEADER_SKIPPING", "enabled", \
	"ENABLE_ROM_DEBUG_SYMBOLS",       "-", \
	"ENABLE_SEGMENTED_ROM_TEXT_BLOCK", "-", \
	"ENABLE_SOFT_FLOAT",              "-", \
	"ENABLE_SEMAPHORE",               "enabled", \
	"ENABLE_ROM_GENERATOR",           "-", \
	"ENABLE_INTERPRETER_GENERATOR",   "-", \
	"ENABLE_STACK_TRACE",             "enabled", \
	"ENABLE_THUMB_LIBC_GLUE",         "-", \
	"ENABLE_THUMB_VM",                "-", \
	"ENABLE_THUMB_COMPILER",          "-", \
	"ENABLE_THUMB_REGISTER_MAPPING",  "-", \
	"ENABLE_THUMB_GP_TABLE",          "-", \
	"ENABLE_TIMER_THREAD",            "enabled", \
	"ENABLE_TTY_TRACE",               "-", \
	"ENABLE_TOS_CACHING",             "enabled", \
	"ENABLE_FULL_STACK",              "enabled", \
	"ENABLE_VERBOSE_ASSERTION",       "-", \
	"ENABLE_VERIFY_ONLY",             "enabled", \
	"ENABLE_EMBEDDED_CALLINFO",       "-", \
	"ENABLE_APPENDED_CALLINFO",       "enabled", \
	"ENABLE_COMPRESSED_VSF",          "-", \
	"ENABLE_INLINE_COMPILER_STUBS",   "enabled", \
	"ENABLE_XSCALE_WMMX_INSTRUCTIONS", "-", \
	"ENABLE_XSCALE_WMMX_TIMER_TICK",  "-", \
	"ENABLE_XSCALE_WMMX_ARRAYCOPY",   "-", \
	"ENABLE_REMEMBER_ARRAY_LENGTH",   "-", \
	"ENABLE_LOOP_OPTIMIZATION",       "-", \
	"ENABLE_XSCALE_PMU_CYCLE_COUNTER", "-", \
	"ENABLE_NPCE",                    "-", \
	"ENABLE_INTERNAL_CODE_OPTIMIZER", "-", \
	"ENABLE_INLINE",                  "enabled", \
	"ENABLE_REMEMBER_ARRAY_CHECK",    "-", \
	"ENABLE_STATIC_TRAMPOLINE",       "-", \
	"ENABLE_TRAMPOLINE",              "-", \
	"ENABLE_CSE",                     "enabled", \
	"ENABLE_HARDWARE_TIMER_FOR_TICKS", "-", \
	"ENABLE_OOP_TAG",                 "-", \
	"ENABLE_MULTIPLE_PROFILES_SUPPORT", "-", \
	"ENABLE_MEMBER_HIDING",           "-", \
	"ENABLE_JVMPI_PROFILE",           "-", \
	"ENABLE_JVMPI_PROFILE_VERIFY",    "-", \
	"ENABLE_CODE_PATCHING",           "-", \
	"ENABLE_CONDITIONAL_BRANCH_OPTIMIZATIONS", "enabled", \
	"ENABLE_FREQUENT_FORCED_GC_SUPPRESSION", "-", \
	"ENABLE_JNI",                     "-", \
	"ENABLE_ALLOCATION_REDO",         "enabled", \
	"ENABLE_ANNOTATED_LAST_REG_ALLOCATION", "enabled", \
	"ENABLE_STACK_ALIGNMENT",         "-", \
}
#endif

#endif /* _JVM_CONFIG_H_ */

