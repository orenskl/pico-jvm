/*
 *   
 *
 * Copyright  1990-2007 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version
 * 2 only, as published by the Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included at /legal/license.txt).
 * 
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
 * Clara, CA 95054 or visit www.sun.com if you need additional
 * information or have any questions.
 */

#include "jvmconfig.h"

#include "BuildFlags.hpp"
#include "GlobalDefinitions.hpp"
#include "Globals.hpp"

#include "OsFile_pico.hpp"
#include "Debug.hpp"

const unsigned char _main_jar[] = {
  0x50, 0x4b, 0x03, 0x04, 0x0a, 0x00, 0x00, 0x08, 0x00, 0x00, 0x46, 0x75,
  0x9b, 0x57, 0xed, 0x23, 0x23, 0xd9, 0x9f, 0x01, 0x00, 0x00, 0x9f, 0x01,
  0x00, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
  0x6c, 0x61, 0x73, 0x73, 0xfe, 0xca, 0x00, 0x00, 0xca, 0xfe, 0xba, 0xbe,
  0x00, 0x00, 0x00, 0x30, 0x00, 0x1d, 0x0a, 0x00, 0x06, 0x00, 0x0f, 0x09,
  0x00, 0x10, 0x00, 0x11, 0x08, 0x00, 0x12, 0x0a, 0x00, 0x13, 0x00, 0x14,
  0x07, 0x00, 0x15, 0x07, 0x00, 0x16, 0x01, 0x00, 0x06, 0x3c, 0x69, 0x6e,
  0x69, 0x74, 0x3e, 0x01, 0x00, 0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04,
  0x43, 0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69, 0x6e, 0x65, 0x4e,
  0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00,
  0x04, 0x6d, 0x61, 0x69, 0x6e, 0x01, 0x00, 0x16, 0x28, 0x5b, 0x4c, 0x6a,
  0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72,
  0x69, 0x6e, 0x67, 0x3b, 0x29, 0x56, 0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75,
  0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x09, 0x4d, 0x61,
  0x69, 0x6e, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x0c, 0x00, 0x07, 0x00, 0x08,
  0x07, 0x00, 0x17, 0x0c, 0x00, 0x18, 0x00, 0x19, 0x01, 0x00, 0x0d, 0x48,
  0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x21,
  0x07, 0x00, 0x1a, 0x0c, 0x00, 0x1b, 0x00, 0x1c, 0x01, 0x00, 0x04, 0x4d,
  0x61, 0x69, 0x6e, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c,
  0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x01, 0x00,
  0x10, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53,
  0x79, 0x73, 0x74, 0x65, 0x6d, 0x01, 0x00, 0x03, 0x6f, 0x75, 0x74, 0x01,
  0x00, 0x15, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x69, 0x6f, 0x2f, 0x50,
  0x72, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x3b, 0x01,
  0x00, 0x13, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x69, 0x6f, 0x2f, 0x50, 0x72,
  0x69, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x01, 0x00, 0x07,
  0x70, 0x72, 0x69, 0x6e, 0x74, 0x6c, 0x6e, 0x01, 0x00, 0x15, 0x28, 0x4c,
  0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74,
  0x72, 0x69, 0x6e, 0x67, 0x3b, 0x29, 0x56, 0x00, 0x20, 0x00, 0x05, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00,
  0x08, 0x00, 0x01, 0x00, 0x09, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x01, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x05, 0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x09, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x09,
  0x00, 0x00, 0x00, 0x25, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09,
  0xb2, 0x00, 0x02, 0x12, 0x03, 0xb6, 0x00, 0x04, 0xb1, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x08, 0x00, 0x04, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x0e, 0x50, 0x4b, 0x01, 0x02, 0x0a, 0x00, 0x0a, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x46, 0x75, 0x9b, 0x57, 0xed, 0x23, 0x23, 0xd9, 0x9f,
  0x01, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0xfe,
  0xca, 0x00, 0x00, 0x50, 0x4b, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x01, 0x00, 0x3c, 0x00, 0x00, 0x00, 0xcb, 0x01, 0x00, 0x00, 0x00,
  0x00
};
const unsigned int _main_jar_len = 541;

extern "C" {

typedef struct {
    const char * name;
    const unsigned char * data;
    int length;
} file_info;

const file_info fs_image_table[2] = {
  {
    .name   = "main.jar",
    .data   = _main_jar,
    .length = _main_jar_len
  },
  {
    .name = NULL
  }
};

struct OsFile {
    int index;                    // index in fs_image_table
    const unsigned char * data;   // start of data
    int length;                   // length of data
    int pos;                      // current position
};

static OsFile file_handles[10];

OsFile_Handle OsFile_open(const PathChar *fn_filename, const char *mode) {
  int i;

  printf("OsFile_open %s\n",fn_filename);
  for (i=0; ; i++) {
    if (fs_image_table[i].name == NULL) {
      // reached end of table -- file not found
      break;
    }
    if (strcmp(fn_filename, fs_image_table[i].name) == 0) {
      for (int j=0; j<ARRAY_SIZE(file_handles); j++) {
        if (file_handles[j].data == NULL) {
          file_handles[j].index = i;
          file_handles[j].data = fs_image_table[i].data;
          file_handles[j].length = fs_image_table[i].length;
          file_handles[j].pos = 0;
          return &file_handles[j];
        }
      }
      // out of OsFile handles
      break;
    }
  }

  return NULL;
}

int OsFile_close(OsFile_Handle handle) {
  handle->data = NULL;
  return 0;
}

int OsFile_flush(OsFile_Handle handle) {
  // nothing to do
  return 0;
}

size_t OsFile_read(OsFile_Handle handle,
                   void *buffer, size_t size, size_t count) {
  size_t done = 0;
  size_t req = size * count;
  char * p = (char*)buffer;

  while ((handle->pos < handle->length) && (done < req)) {
     *p = handle->data[handle->pos];
     p++;
     handle->pos ++;
     done ++;
  }

  return done;
}

size_t OsFile_write(OsFile_Handle handle,
                    const void *buffer, size_t size, size_t count) {
  UNIMPLEMENTED();
  return 0;
}

long OsFile_length(OsFile_Handle handle) {
  return handle->length;
}

bool OsFile_exists(const PathChar *fn_filename) {
  int i;
  for (i=0; ; i++) {
    if (fs_image_table[i].name == NULL) {
      // reached end of table -- file not found
      break;
    }
    if (strcmp(fn_filename, fs_image_table[i].name) == 0) {
      return true;
    }
  }
  return false;
}

long OsFile_seek(OsFile_Handle handle, long offset, int origin) {
  switch (origin) {
  case SEEK_CUR:
    handle->pos += offset;
    break;
  case SEEK_SET:
    handle->pos = offset;
    break;
  case SEEK_END:
    handle->pos = handle->length + offset;
    break;
  default:
    return -1;
  }

  if (handle->pos < 0) {
    handle->pos = 0;
  } else if (handle->pos > handle->length) {
    handle->pos = handle->length;
  }

  return 0;
}

int OsFile_error(OsFile_Handle handle) {
  return 0;
}

int OsFile_eof(OsFile_Handle handle) {
  return (handle->pos >= handle->length);
}

bool OsFile_rename(const char *from, const char *to) {
  UNIMPLEMENTED();
  return 0;
}

int OsFile_remove(const char *filename) {
  UNIMPLEMENTED();
  return 0;
}

} // extern "C"
